#!/usr/bin/env python3

from __future__ import print_function
import argparse
import io
import pickle
import sys
import collections
import lsh

def main():
    parser = argparse.ArgumentParser(
        description="Searches an LSH index for the closest matches "
                    "for a given file or files.")
    parser.add_argument('index',
        help='LSH index file generated by build_table.py')
    parser.add_argument('file', nargs='+',
        help='files for which to find best matches in index')
    args = parser.parse_args()

    pickle_fp = io.open(args.index, 'rb')
    unpickler = pickle.Unpickler(pickle_fp)

    # read full index into memory
    salts = unpickler.load()
    seqlen = unpickler.load()
    full_index = []
    while True:
        try:
            minhash = unpickler.load()
            fname = unpickler.load()
            full_index.append((minhash, fname))
        except EOFError:
            break

    best_matches = collections.Counter()
    for fname in args.file:
        with open(fname, 'rb') as fp:
            data = fp.read()
        filehash = lsh.minhash(data, seqlen, salts)
        for (otherhash, fname) in full_index:
            matches = sum(1 if x==y else 0
                          for (x, y) in zip(filehash, otherhash))
            best_matches[fname] = matches
        for (fname, count) in best_matches.most_common():
            if count <= 1: break
            print(fname, count)

if __name__=='__main__':
    main()

